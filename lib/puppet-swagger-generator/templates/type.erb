require 'puppet_x/puppetlabs/swagger/symbolize_keys'


Puppet::Type.newtype(:<%= namespace %>_<%= name %>) do
  <% if model['description'] %>
  @doc = "<%= model['description'].gsub('"', "'") %>"
  <% end %>

  ensurable

  <% if model['required'] %>
  validate do
    required_properties = [
    <% model['required'].each do |property| %>
      <%= property.to_sym %>,
    <% end %>
    ]
    required_properties.each do |property|
      # We check for both places so as to cover the puppet resource path as well
      if self[property].nil? and self.provider.send(property) == :absent
        fail "You must provide a #{property}"
      end
    end
  end
  <% end %>

  newparam(:name, namevar: true) do
    desc 'Name of the <%= name %>.'
  end
  <% model['properties'].each do |property_name, details| %>
    <% unless exclusions[name] and exclusions[name].include? property_name %>
      newproperty(:<%= property_name %>) do
        desc "<%= details['description'].gsub('"', "'") %>"
        def insync?(is)
          normalized_is = is.symbolize_keys
          normalized_should = should.symbolize_keys
          if is.all? { |k,v| v.class == String }
            diff = normalized_is.merge(normalized_should)
            diff == normalized_is
          else
            tests = normalized_should.keys.collect do |key|
              normalized_is[key].collect do |is_value|
                normalized_should[key].collect do |should_value|
                  diff = is_value.merge(should_value)
                  diff == is_value
                end
              end
            end
            tests.flatten.include? true
          end
        end
      end
    <% end %>
  <% end %>
end
